{"version":3,"sources":["shared/monthArray.js","components/post-card/index.js","containers/feed/index.js","App.js","serviceWorker.js","index.js"],"names":["MonthsShortened","PostCard","props","formattedDate","data","event_date","date","Date","getDate","d","nth","getMonth","getFullYear","toString","substr","className","isGrid","isFeatured","onClick","postClick","src","thumbnail_image","event_name","EyeOutlined","views","LikeOutlined","likes","ShareAltOutlined","shares","type","icon","size","Option","Select","OriginalPostArr","pagedEndpoints","Feed","useState","isLoading","allposts","currentPage","state","setState","page","a","document","scrollingElement","style","scrollBehavior","scrollTop","axios","get","response","posts","console","log","useEffect","getPosts","skeleton","xs","active","avatar","paragraph","rows","length","BarsOutlined","AppstoreOutlined","defaultValue","width","onChange","value","sortedPosts","sort","b","map","post","i","postSelected","key","window","location","reload","current","total","defaultPageSize","App","visible","setVisible","selectedPost","setSelectedPost","title","closable","onClose","getContainer","placement","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.800c7e57.chunk.js","sourcesContent":["const Months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December',\n];\nconst MonthsShortened = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'Jun',\n    'Jul',\n    'Aug',\n    'Sept',\n    'Oct',\n    'Nov',\n    'Dec',\n];\n\nexport { MonthsShortened };\nexport default Months;\n","import React from 'react';\nimport \"./style.scss\";\nimport { MonthsShortened } from '../../shared/monthArray';\nimport { EyeOutlined, LikeOutlined, ShareAltOutlined} from '@ant-design/icons';\nimport { Space, Button } from 'antd';\n\nconst PostCard = props =>{\n    const nth = function(d) {\n        if (d > 3 && d < 21) return 'th';\n        switch (d % 10) {\n            case 1:\n                return 'st';\n            case 2:\n                return 'nd';\n            case 3:\n                return 'rd';\n            default:\n                return 'th';\n        }\n    };\n    let formattedDate = '';\n    if (props.data.event_date) {\n        const date = new Date(props.data.event_date);   \n        formattedDate = date.getDate() +\n        nth(date.getDate()) +\n        ' ' +\n        MonthsShortened[date.getMonth()] +\n        \"'\" +\n        date\n            .getFullYear()\n            .toString()\n            .substr(-2);\n    }\n    return(\n     <div className={`feed-post ${props.isGrid ? 'is-grid': ''} ${props.isFeatured ? 'is-featured': ''}`} onClick={props.postClick}>\n         <div className=\"fp-image\">\n            <img src={props.data.thumbnail_image} />\n         </div>\n         <div className=\"fp-content\">\n             {\n                 !props.isFeatured ?\n                 <h3 className=\"fp-title\">{props.data.event_name}</h3>\n                 : null\n             }\n            \n            <span className=\"fp-date\">{formattedDate}</span>\n            <ul className=\"count-info\">\n                <li className=\"views\"><EyeOutlined /><span>{props.data.views}</span></li>\n                <li className=\"likes\"><LikeOutlined /><span>{props.data.likes}</span></li>\n                <li className=\"shares\"><ShareAltOutlined /><span>{props.data.shares}</span></li>\n            </ul>\n         </div>\n         {\n                 props.isFeatured ?\n         <div className=\"fp-actions\">\n            <Space>\n                <Button type=\"default\" icon={<LikeOutlined />} size={'large'}>\n                    Like\n                </Button>\n                <Button type=\"default\" icon={<ShareAltOutlined />} size={'large'}>\n                    Share\n                </Button>\n            </Space>\n         </div>\n         :null}\n     </div>\n\n    )\n}\n\nexport default PostCard;","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport PostCard from \"../../components/post-card\";\nimport { Skeleton, Row, Col,Select,Pagination, Button} from 'antd';\nimport { BarsOutlined, AppstoreOutlined} from '@ant-design/icons';\nimport \"./style.scss\";\nimport { get, set } from 'idb-keyval';\n\n\nconst { Option } = Select;\n\nlet OriginalPostArr = [];\nconst pagedEndpoints = [\n    'https://www.mocky.io/v2/59b3f0b0100000e30b236b7e',\n    'https://www.mocky.io/v2/59ac28a9100000ce0bf9c236',\n    'https://www.mocky.io/v2/59ac293b100000d60bf9c239',\n]\nconst Feed = (props)=>{\n\n    const [state,setState] = useState({\n        isLoading: false,\n        allposts : [],\n        isGrid:false,\n        currentPage:1\n    })\n    \n    async function onChange(page){\n        try{\n            setState({...state,isLoading:true})\n            document.scrollingElement.style.scrollBehavior = 'smooth';\n            document.scrollingElement.scrollTop = 0;\n            const response = await axios.get(pagedEndpoints[page - 1]);\n            setState({...state, isLoading:false, allposts:response.data.posts,currentPage:page});\n            OriginalPostArr = [...response.data.posts];\n        }\n        catch(err){\n            setState({...state, isLoading:false, allposts:[]});\n            console.log(err);\n        }\n    };\n    const handleChange = (value)=> {\n        const {allposts} = state;\n        console.log(`selected ${value}`);\n        let sortedPosts = [];\n        switch (value) {\n            case 'likesup':\n                sortedPosts = allposts.sort((a, b) => (a.likes > b.likes) ? 1 : -1)\n                break;\n            case 'viewsup':\n                sortedPosts = allposts.sort((a, b) => (a.views > b.views) ? 1 : -1)\n                break;\n            case 'likesdown':\n                sortedPosts = allposts.sort((a, b) => (a.likes > b.likes) ? -1 : 1)\n                break;\n            case 'viewsdown':\n                sortedPosts = allposts.sort((a, b) => (a.views > b.views) ? -1 : 1)\n                break;\n            case 'sharesup':\n                sortedPosts = allposts.sort((a, b) => (a.shares > b.shares) ? 1 : -1)\n                break;\n            case 'sharesdown':\n                sortedPosts = allposts.sort((a, b) => (a.shares > b.shares) ? -1 : 1)\n                break;\n            case 'default':\n                sortedPosts = OriginalPostArr;\n                \n                break;\n            \n            default:\n                sortedPosts = [...OriginalPostArr];\n                break;\n        }\n        \n        setState({...state,allposts: [...sortedPosts]})\n      }\n    useEffect( ()=>{\n        console.log('useeffect');\n        \n        async function getPosts(){\n            try{\n                console.log('try');\n                const response = await axios.get(pagedEndpoints[0]);\n                setState({...state,isLoading:false,allposts: response.data.posts});\n                OriginalPostArr = [...response.data.posts];\n                // set('posts', OriginalPostArr);\n                \n            }\n            catch(err){\n                \n                setState({...state,isLoading:false});\n                console.log(err);\n                // const offlinePosts = get('posts');\n                // console.log(offlinePosts);\n                \n            } \n        }\n        getPosts();\n    },[])\n    const skeleton = (<Row>\n                        <Col xs={24} className=\"custom-skeleton\">\n                            <Skeleton active avatar paragraph={{ rows: 1 }} />\n                        </Col>\n                        <Col xs={24} className=\"custom-skeleton\">\n                            <Skeleton active  avatar paragraph={{ rows: 1 }} />\n                        </Col>\n                        <Col xs={24} className=\"custom-skeleton\">\n                            <Skeleton active  avatar paragraph={{ rows: 1 }} />\n                        </Col>\n                    </Row>)\n    return(\n     <>\n        {/* {alert(state.isLoading)} */}\n        <div className={`feed-options ${state.allposts.length === 0? 'disabled':null}`}>\n            <div className=\"list-options\">\n                <a className={`${!state.isGrid&&'active'}`} onClick={()=>setState({...state,isGrid:false})}>\n                    <BarsOutlined />\n                </a>\n                <a className={`${state.isGrid&&'active'}`} onClick={()=>setState({...state,isGrid:true})}>\n                    <AppstoreOutlined />\n                </a>\n            </div>\n            <div className=\"sorting-options\">\n                <label>Sort By:</label>\n                <Select defaultValue=\"default\" style={{ width: 170 }} onChange={handleChange}>\n                    <Option value=\"default\">Default</Option>\n                    <Option value=\"viewsup\">Views (low to high)</Option>\n                    <Option value=\"viewsdown\">Views (high to low)</Option>\n                    <Option value=\"likesup\">Likes (low to high)</Option>\n                    <Option value=\"likesdown\">Likes (high to low)</Option>\n                    <Option value=\"sharesup\">Shares (low to high)</Option>\n                    <Option value=\"sharesdown\">Shares (high to low)</Option>\n                </Select>   \n            </div>\n        </div>\n        {!state.isLoading? \n        <>\n            <div className={`post-list`}>\n            \n                {state.allposts.length? state.allposts.map((post,i) => {\n                    return(\n                            <PostCard postClick={() => props.postSelected(post)} key={`post-${i}`} data={post} isGrid={state.isGrid}/>\n                        \n                    )\n                }): <div className=\"error-block\">\n                        <img src=\"/assets/blank.svg\"/>\n                        <p>Something seems to be not working!\n                            <br/>\n                            <span>\n                            Try refreshing the page or check back later.\n                            </span>\n                        </p>\n                        <Button type=\"primary\" onClick={()=>window.location.reload()}>Refresh</Button>\n                    </div>}\n\n            </div>\n            {state.allposts.length?\n            <Pagination className=\"custom-pagination\" current={state.currentPage} onChange={onChange} total={21} defaultPageSize={7} />\n            :null}\n        </>\n        :\n        <div style={{'width':'100%'}}>\n            {skeleton}\n        </div>}\n     </>\n    )\n}\n\nexport default Feed;","import React, { useState } from 'react';\nimport './App.css';\nimport Feed  from \"./containers/feed\";\nimport { Drawer } from 'antd';\nimport PostCard from './components/post-card';\n\nfunction App() {\n\n  const [visible, setVisible] = useState(false);\n  const [selectedPost, setSelectedPost] = useState({});\n  const openDrawer = (post) =>{\n    console.log(post);\n    setSelectedPost(post);\n    setVisible(true)\n  }\n  return (\n    <main className=\"container\">\n      <div className=\"banner\">\n          Event Feed\n      </div>\n      <Feed postSelected={(a)=>openDrawer(a)}/>\n      <Drawer\n          title={selectedPost.event_name}\n          closable={false}\n          onClose={()=>setVisible(false)}\n          visible={visible}\n          getContainer={false}\n          className={'custom-drawer'}\n          placement={'bottom'}\n        >\n          <PostCard data={selectedPost} isFeatured={true}/>\n        </Drawer>\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}